// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH
    inserted_ff as (
        INSERT INTO
            follows (
                id,
                created_at,
                updated_at,
                user_id,
                feed_id
            )
        VALUES ($1, $2, $3, $4, $5) RETURNING id, created_at, updated_at, user_id, feed_id
    )
select
    inserted_ff.id, inserted_ff.created_at, inserted_ff.updated_at, inserted_ff.user_id, inserted_ff.feed_id,
    u.name AS username,
    f.name AS feed_name
FROM
    inserted_ff
    INNER JOIN users u ON u.id = inserted_ff.user_id
    INNER JOIN feeds f ON inserted_ff.feed_id = f.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	Username  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.Username,
		&i.FeedName,
	)
	return i, err
}

const getFeedFollow = `-- name: GetFeedFollow :many
SELECT fe.id, fe.created_at, fe.updated_at, fe.name, fe.url, fe.user_id from follows fo inner join feeds fe on fo.feed_id = fe.id
WHERE fo.user_id = (SELECT id from users u where u.name = $1)
`

func (q *Queries) GetFeedFollow(ctx context.Context, name string) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollow, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFeedFollow = `-- name: RemoveFeedFollow :exec
delete from follows 
where
 user_id = (select id from users where users.name = $1)
 AND
 feed_id = (select id from feeds where feeds.url = $2)
`

type RemoveFeedFollowParams struct {
	Name string
	Url  string
}

func (q *Queries) RemoveFeedFollow(ctx context.Context, arg RemoveFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, removeFeedFollow, arg.Name, arg.Url)
	return err
}
